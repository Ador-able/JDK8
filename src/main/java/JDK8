为什么需要Lambda表达式
    //1.java中无法将函数作为一个参数传递给一个方法，也无法声明返回一个函数的的方法（JavaScript是一个典型函数式语言）

Lambda基本结构
    //（param1,param2,param3）->{ //TODO }
    //方法引用  类名::静态方法   引用名（对象名）::实例方法名
    //类名::实例方法名   构造方法引用：类名::new

函数式接口
    //使用@FunctionalInterface声明函数式接口
    //一个接口有且只有一个抽象方法，但是可以有多个非抽象方法的接口。
    //如果某个接口只有一个抽象方法，但是并没有声明@FunctionalInterface注解。编译器依旧将此接口视作函数式接口。
    //重写object包下的抽象方法，并不记入接口的抽象方法数量
    //可以使用Lambda表达式来表示该接口的一个实现
    //Lambda表达式在Java中是一个对象——函数式接口对象

默认方法(Default Method)
    //参见DefaultMethodTest
    //在java 8 之前，接口与其实现类之间的耦合度太高了,当需要为一个接口添加方法时，所有的实现类都必须随之修改。
    //默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现
    //这在lambda表达式作为java8语言的重要特性而出现之际，为升级旧接口且保持向后兼容（backward compatibility）提供了途径。
    //forEach方法是jdk1.8新增的接口默认方法，正是因为有了默认方法的引入，才不会因为 Iterable 接口中添加了forEach方法就需要修改所有Iterable接口的实现类。
    //和其它方法一样，接口默认方法也可以被继承。

接口默认方法的继承分三种情况（分别对应上面的 InterfaceB 接口、InterfaceC 接口和 InterfaceD 接口）:
    //不覆写默认方法，直接从父接口中获取方法的默认实现。
    //覆写默认方法，这跟类与类之间的覆写规则相类似。
    //覆写默认方法并将它重新声明为抽象方法，这样新接口的子类必须再次覆写并实现这个抽象方法。

流(Steam）
    //由三部分构成 1.源 2.零个或多个中间操作 3.终止操作
    //流操作的分类 1.惰性求值（中间操作） 2.及早求值（终止操作）   在没有终止操作进行时，中间操作并不执行。
    //不允许对流进行重复操作    流关闭后不能再使用

收集器（collect）（可变性 reduce不可变性）
    //Collector作为收集器的参数
    //Collector是一个接口，它是一个可变的汇聚操作，将输入元素累积到一个可变的结果容器中
    //它会在所有元素都处理完毕后，将累计的结果转换为一个最终的表示（这是一个可选的操作）
    //支持串行和并行两种方式
    //Collectors本身提供了关于Collector的常见汇聚实现，Collectors本身实际上是一个工厂。
    //Collector由四个函数来指定，这四个函数一起工作以将条目累加到可变结果容器中，并且可选地对结果进行最终转换。
           1. 创建新的结果容器（ supplier() ）
           2. 将新的数据元素并入结果容器（ accumulator() ）
           3. 将两个结果容器组合成一个（ combiner() ）
           4. 在容器上执行可选的最终变换（ finisher() ）
    //使用收集器的顺序实现将创建单个结果容器，并为每个输入元素调用accumulator()一次。
    //并行实现将分区输入，为每个分区创建一个结果容器，将每个分区的内容累加到该分区的结果中，然后使用组合器函数将结果合并为一个组合结果。
    //为了确保串行与并行操作结果的等价性。Collector需要满足两个条件：identity（同一性）与associativity（结合性）
    //identity约束:对于任何部分的结果，将其与空结果容器组合必须产生等价的结果。也就是说a=combiner.apply(a, supplier.get()) 。
    //associativity约束:分割计算必须产生等价的结果。也就是说，对于任何输入参数t1和t2 ，下面的计算中的结果r1和r2必须是等价的
           A a1 = supplier.get();
           accumulator.accept(a1, t1);
           accumulator.accept(a1, t2);
           R r1 = finisher.apply(a1);// result without splitting
           A a2 = supplier.get();
           accumulator.accept(a2, t1);
           A a3 = supplier.get();
           accumulator.accept(a3, t2);
           R r2 = finisher.apply(combiner.apply(a2, a3));// result with splitting
    //基于Collector<T,A,R>(Stream.collect(Collector))的库必须遵守以下约束：
          T：流中每一个参数的类型   A：为中间操作的可变类型（子结果的类型） R：返回结果的类型
          1.传递给accumulator()的第一个参数 ，传递给combiner()的两个参数，传递给finisher()的参数必须是先前调用supplier()、accumulator()或combiner()的结果。
          2.除了将结果再次传递给accumulator()，combiner()或finisher()功能和将它们返回给操作的调用者之外，实现不应该对supplier()、accumulator()或combiner()的结果进行任何操作。
          3.如果传递给combiner()或finisher()的结果，并没有从该函数返回相同的对象，则不会再次使用该对象。
          4.一旦结果传递给combiner()或finisher()，它就不会再次传递给accumulator()。
          5.对于非并发收集器，返回的任何结果必须是线程封闭的。这使得集合可以进行并行操作，不需要任何额外的同步。必须实现reduction确保输入被正确分区，分区被隔离处理，并且combiner()仅在accumulator()完成后才进行。
          6.对于并发收集器，可以实现reduction（但不是必须）。 并发reduction是从多个线程并发调用accumulator()，使用的是同一个并发可修改的（线程安全的）结果容器，而不是在accumulator()期间保持结果隔离。并发收集器应在具有Collector.Characteristics.UNORDERED特性或者数据无序时使用。
分割迭代器(Spliterator)
    //为了并行遍历元素而设计的一个迭代器，jdk1.8中的集合框架中的数据结构都默认实现了spliterator
    //迭代器的主要作用就是把集合分成了好几段，每个线程执行一段，因此是线程安全的。
    //基于modCount的快速失败机制，如果迭代过程中集合元素被修改，会抛出异常