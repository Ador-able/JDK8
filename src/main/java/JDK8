为什么需要Lambda表达式
    //1.java中无法将函数作为一个参数传递给一个方法，也无法声明返回一个函数的的方法（JavaScript是一个典型函数式语言）

Lambda基本结构
    //（param1,param2,param3）->{ //TODO }

函数式接口
    //使用@FunctionalInterface声明函数式接口
    //一个接口有且只有一个抽象方法，但是可以有多个非抽象方法的接口。
    //如果某个接口只有一个抽象方法，但是并没有声明@FunctionalInterface注解。编译器依旧将此接口视作函数式接口。
    //重写object包下的抽象方法，并不记入接口的抽象方法数量
    //可以使用Lambda表达式来表示该接口的一个实现
    //Lambda表达式在Java中是一个对象——函数式接口对象

默认方法(Default Method)
    //参见DefaultMethodTest
    //在java 8 之前，接口与其实现类之间的耦合度太高了,当需要为一个接口添加方法时，所有的实现类都必须随之修改。
    //默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现
    //这在lambda表达式作为java8语言的重要特性而出现之际，为升级旧接口且保持向后兼容（backward compatibility）提供了途径。
    //forEach方法是jdk1.8新增的接口默认方法，正是因为有了默认方法的引入，才不会因为 Iterable 接口中添加了forEach方法就需要修改所有Iterable接口的实现类。
    //和其它方法一样，接口默认方法也可以被继承。
接口默认方法的继承分三种情况（分别对应上面的 InterfaceB 接口、InterfaceC 接口和 InterfaceD 接口）:
    //不覆写默认方法，直接从父接口中获取方法的默认实现。
    //覆写默认方法，这跟类与类之间的覆写规则相类似。
    //覆写默认方法并将它重新声明为抽象方法，这样新接口的子类必须再次覆写并实现这个抽象方法。

流(Steam）